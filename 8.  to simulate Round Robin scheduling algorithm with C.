#include <stdio.h>

typedef struct {
    int pid, bt, remaining_bt, wt, tat;
} Process;

void findWaitingTime(Process p[], int n, int quantum) {
    int remaining_processes = n;
    int time = 0;
    
    while (remaining_processes > 0) {
        for (int i = 0; i < n; i++) {
            if (p[i].remaining_bt > 0) {
                if (p[i].remaining_bt > quantum) {
                    time += quantum;
                    p[i].remaining_bt -= quantum;
                } else {
                    time += p[i].remaining_bt;
                    p[i].wt = time - p[i].bt;
                    p[i].remaining_bt = 0;
                    remaining_processes--;
                }
            }
        }
    }
}

void findTurnAroundTime(Process p[], int n) {
    for (int i = 0; i < n; i++) {
        p[i].tat = p[i].bt + p[i].wt;
    }
}

void printResult(Process p[], int n) {
    int total_wt = 0, total_tat = 0;
    printf("\nPID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        total_wt += p[i].wt;
        total_tat += p[i].tat;
        printf("%d\t%d\t\t%d\t\t%d\n", p[i].pid, p[i].bt, p[i].wt, p[i].tat);
    }
    printf("\nAverage Waiting Time: %.2f\n", (float)total_wt / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_tat / n);
}

int main() {
    int n, quantum;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    
    Process p[n];
    
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &p[i].bt);
        p[i].remaining_bt = p[i].bt;
    }
    
    printf("Enter time quantum: ");
    scanf("%d", &quantum);

    findWaitingTime(p, n, quantum);
    findTurnAroundTime(p, n);
    printResult(p, n);
    
    return 0;
}
