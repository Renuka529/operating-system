#include <stdio.h>

typedef struct {
    int pid, bt, wt, tat, priority, remaining_bt;
} Process;

void findWaitingTime(Process p[], int n) {
    int time = 0, completed = 0, min_priority;
    while (completed < n) {
        min_priority = 9999;
        int current_process = -1;
        
        for (int i = 0; i < n; i++) {
            if (p[i].remaining_bt > 0 && p[i].priority < min_priority) {
                min_priority = p[i].priority;
                current_process = i;
            }
        }

        if (current_process != -1) {
            p[current_process].remaining_bt--;
            time++;
            if (p[current_process].remaining_bt == 0) {
                completed++;
                p[current_process].tat = time;
                p[current_process].wt = p[current_process].tat - p[current_process].bt;
            }
        }
    }
}

void calculateTurnAroundTime(Process p[], int n) {
    for (int i = 0; i < n; i++) {
        p[i].tat = p[i].wt + p[i].bt;
    }
}

void printResult(Process p[], int n) {
    int total_wt = 0, total_tat = 0;
    printf("\nPID\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        total_wt += p[i].wt;
        total_tat += p[i].tat;
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", p[i].pid, p[i].bt, p[i].priority, p[i].wt, p[i].tat);
    }
    printf("\nAverage Waiting Time: %.2f\n", (float)total_wt / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_tat / n);
}

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process p[n];
    
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter burst time and priority for process %d: ", i + 1);
        scanf("%d %d", &p[i].bt, &p[i].priority);
        p[i].remaining_bt = p[i].bt;
    }

    findWaitingTime(p, n);
    calculateTurnAroundTime(p, n);
    printResult(p, n);

    return 0;
}
