#include <stdio.h>
#include <string.h>

#define MAX_ROOT_DIRS 3     // Max number of subdirectories in root
#define MAX_SUB_DIRS 3      // Max number of files in each subdirectory
#define MAX_FILENAME 50

// Structure to represent a subdirectory
typedef struct {
    char name[MAX_FILENAME];
    char files[MAX_SUB_DIRS][MAX_FILENAME];
    int file_count;
} SubDirectory;

// Root directory (array of subdirectories)
SubDirectory root_dir[MAX_ROOT_DIRS];
int root_count = 0;

// Function to create a new subdirectory
void create_subdirectory(char *name) {
    if (root_count < MAX_ROOT_DIRS) {
        strcpy(root_dir[root_count].name, name);
        root_dir[root_count].file_count = 0; // Initialize file count to 0
        root_count++;
        printf("Subdirectory '%s' created successfully.\n", name);
    } else {
        printf("Cannot create more subdirectories. Root directory is full.\n");
    }
}

// Function to add a file to a subdirectory
void add_file_to_subdir(char *subdir_name, char *file_name) {
    int i;
    for (i = 0; i < root_count; i++) {
        if (strcmp(root_dir[i].name, subdir_name) == 0) {
            if (root_dir[i].file_count < MAX_SUB_DIRS) {
                strcpy(root_dir[i].files[root_dir[i].file_count], file_name);
                root_dir[i].file_count++;
                printf("File '%s' added to subdirectory '%s'.\n", file_name, subdir_name);
                return;
            } else {
                printf("Subdirectory '%s' is full. Cannot add more files.\n", subdir_name);
                return;
            }
        }
    }
    printf("Subdirectory '%s' not found.\n", subdir_name);
}

// Function to list all files in a specific subdirectory
void list_files_in_subdir(char *subdir_name) {
    int i;
    for (i = 0; i < root_count; i++) {
        if (strcmp(root_dir[i].name, subdir_name) == 0) {
            if (root_dir[i].file_count == 0) {
                printf("No files in subdirectory '%s'.\n", subdir_name);
            } else {
                printf("Files in subdirectory '%s':\n", subdir_name);
                for (int j = 0; j < root_dir[i].file_count; j++) {
                    printf("%d. %s\n", j + 1, root_dir[i].files[j]);
                }
            }
            return;
        }
    }
    printf("Subdirectory '%s' not found.\n", subdir_name);
}

// Function to delete a file from a subdirectory
void delete_file_from_subdir(char *subdir_name, char *file_name) {
    int i, j;
    for (i = 0; i < root_count; i++) {
        if (strcmp(root_dir[i].name, subdir_name) == 0) {
            for (j = 0; j < root_dir[i].file_count; j++) {
                if (strcmp(root_dir[i].files[j], file_name) == 0) {
                    // Shift the files to remove the deleted one
                    for (int k = j; k < root_dir[i].file_count - 1; k++) {
                        strcpy(root_dir[i].files[k], root_dir[i].files[k + 1]);
                    }
                    root_dir[i].file_count--;
                    printf("File '%s' deleted from subdirectory '%s'.\n", file_name, subdir_name);
                    return;
                }
            }
            printf("File '%s' not found in subdirectory '%s'.\n", file_name, subdir_name);
            return;
        }
    }
    printf("Subdirectory '%s' not found.\n", subdir_name);
}

int main() {
    int choice;
    char subdir_name[MAX_FILENAME], file_name[MAX_FILENAME];

    while (1) {
        printf("\nTwo-Level Directory Operations\n");
        printf("1. Create Subdirectory\n");
        printf("2. Add File to Subdirectory\n");
        printf("3. List Files in Subdirectory\n");
        printf("4. Delete File from Subdirectory\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // Consume newline

        switch (choice) {
            case 1:
                printf("Enter subdirectory name: ");
                fgets(subdir_name, sizeof(subdir_name), stdin);
                subdir_name[strcspn(subdir_name, "\n")] = '\0'; // Remove newline
                create_subdirectory(subdir_name);
                break;
            case 2:
                printf("Enter subdirectory name: ");
                fgets(subdir_name, sizeof(subdir_name), stdin);
                subdir_name[strcspn(subdir_name, "\n")] = '\0'; // Remove newline
                printf("Enter file name to add: ");
                fgets(file_name, sizeof(file_name), stdin);
                file_name[strcspn(file_name, "\n")] = '\0'; // Remove newline
                add_file_to_subdir(subdir_name, file_name);
                break;
            case 3:
                printf("Enter subdirectory name: ");
                fgets(subdir_name, sizeof(subdir_name), stdin);
                subdir_name[strcspn(subdir_name, "\n")] = '\0'; // Remove newline
                list_files_in_subdir(subdir_name);
                break;
            case 4:
                printf("Enter subdirectory name: ");
                fgets(subdir_name, sizeof(subdir_name), stdin);
                subdir_name[strcspn(subdir_name, "\n")] = '\0'; // Remove newline
                printf("Enter file name to delete: ");
                fgets(file_name, sizeof(file_name), stdin);
                file_name[strcspn(file_name, "\n")] = '\0'; // Remove newline
                delete_file_from_subdir(subdir_name, file_name);
                break;
            case 5:
                printf("Exiting...\n");
                return 0;
            default:
                printf("Invalid choice, try again.\n");
        }
    }
}
